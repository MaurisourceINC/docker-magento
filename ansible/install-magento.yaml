- name: Install Magento 
  hosts: server
  become: yes
  gather_facts: false

  vars:
      username: "{{ lookup('env', 'USERNAME') | default('default_username', true) }}"
      password: "{{ lookup('env', 'PASSWORD') | default('default_password', true) }}"

  tasks:
    - name: Populate Apt's Cache with package definitions to avoid "no such package" errors
      apt:
        update_cache: true

    - name: Create a Composer dir
      file:
        path: ~/.composer
        state: directory
        # mode: '0755'

    - name: Create a Composer dir
      file:
        path: ~/.ssh
        state: directory
        # mode: '0755'

    - name: Create a magento
      file:
        path: ./magento
        state: directory
        mode: '0755'

    - name: Run command to print working directory
      command: pwd 
      args:
        chdir: ./magento 
      register: pwd_output
      no_log: false

    - name: Print working directory
      debug:
        msg: "Working directory: {{ pwd_output.stdout }}"
      no_log: false


    - name: Copy the Docker Compose scripts
      copy:
        src: ../compose/
        dest: '{{ pwd_output.stdout }}/'

    - name: Set mode of files in bin dir to executable
      file:
        path: '{{ pwd_output.stdout }}/bin'
        state: directory
        recurse: yes
        mode: '0755'

    - name: Authenticate compose
      expect:
        command: bin/setup-composer-auth 
        responses:
          'Username:': "{{ username }}\n"
          'Password:': "{{ password }}\n"
      args:
        chdir: '{{ pwd_output.stdout }}'

    - name: Run the download command
      command: bin/download 2.4.7 community 
      args:
        chdir: '{{ pwd_output.stdout }}'


    - name: Run the setup command
      command: bin/setup aws.onedev.one 
      become: yes
      become_user: root
      args:
        chdir: '{{ pwd_output.stdout }}'